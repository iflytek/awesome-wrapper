// Code generated by protoc-gen-go. DO NOT EDIT.
// source: concurrentNet-proto/concurrentNet.proto

package concurrentNet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SimpleMsg struct {
	Appid                string   `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleMsg) Reset()         { *m = SimpleMsg{} }
func (m *SimpleMsg) String() string { return proto.CompactTextString(m) }
func (*SimpleMsg) ProtoMessage()    {}
func (*SimpleMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f86cc07ef58d0f7c, []int{0}
}

func (m *SimpleMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleMsg.Unmarshal(m, b)
}
func (m *SimpleMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleMsg.Marshal(b, m, deterministic)
}
func (m *SimpleMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMsg.Merge(m, src)
}
func (m *SimpleMsg) XXX_Size() int {
	return xxx_messageInfo_SimpleMsg.Size(m)
}
func (m *SimpleMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMsg proto.InternalMessageInfo

func (m *SimpleMsg) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type Reply struct {
	Ret                  bool     `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f86cc07ef58d0f7c, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

func init() {
	proto.RegisterType((*SimpleMsg)(nil), "concurrentNet.SimpleMsg")
	proto.RegisterType((*Reply)(nil), "concurrentNet.Reply")
}

func init() {
	proto.RegisterFile("concurrentNet-proto/concurrentNet.proto", fileDescriptor_f86cc07ef58d0f7c)
}

var fileDescriptor_f86cc07ef58d0f7c = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0xce, 0xcf, 0x4b,
	0x2e, 0x2d, 0x2a, 0x4a, 0xcd, 0x2b, 0xf1, 0x4b, 0x2d, 0xd1, 0x2d, 0x28, 0xca, 0x2f, 0xc9, 0xd7,
	0x47, 0x11, 0xd3, 0x03, 0x8b, 0x09, 0xf1, 0xa2, 0x08, 0x2a, 0x29, 0x72, 0x71, 0x06, 0x67, 0xe6,
	0x16, 0xe4, 0xa4, 0xfa, 0x16, 0xa7, 0x0b, 0x89, 0x70, 0xb1, 0x26, 0x16, 0x14, 0x64, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x4a, 0x92, 0x5c, 0xac, 0x41, 0xa9, 0x05, 0x39,
	0x95, 0x42, 0x02, 0x5c, 0xcc, 0x45, 0xa9, 0x25, 0x60, 0x49, 0x8e, 0x20, 0x10, 0xd3, 0xc8, 0x97,
	0x8b, 0xcf, 0x19, 0xd9, 0xb8, 0x44, 0x21, 0x6b, 0x2e, 0xf6, 0xe0, 0xd4, 0xbc, 0x14, 0x90, 0x69,
	0x12, 0x7a, 0xa8, 0xf6, 0xc3, 0xed, 0x91, 0x12, 0x41, 0x93, 0x01, 0x1b, 0xaf, 0xc4, 0x90, 0xc4,
	0x06, 0x76, 0xa2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x9b, 0x53, 0x32, 0xcd, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConcurrentNetaClient is the client API for ConcurrentNeta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConcurrentNetaClient interface {
	SendMsg(ctx context.Context, in *SimpleMsg, opts ...grpc.CallOption) (*Reply, error)
}

type concurrentNetaClient struct {
	cc *grpc.ClientConn
}

func NewConcurrentNetaClient(cc *grpc.ClientConn) ConcurrentNetaClient {
	return &concurrentNetaClient{cc}
}

func (c *concurrentNetaClient) SendMsg(ctx context.Context, in *SimpleMsg, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/concurrentNet.ConcurrentNeta/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcurrentNetaServer is the server API for ConcurrentNeta service.
type ConcurrentNetaServer interface {
	SendMsg(context.Context, *SimpleMsg) (*Reply, error)
}

func RegisterConcurrentNetaServer(s *grpc.Server, srv ConcurrentNetaServer) {
	s.RegisterService(&_ConcurrentNeta_serviceDesc, srv)
}

func _ConcurrentNeta_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcurrentNetaServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/concurrentNet.ConcurrentNeta/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcurrentNetaServer).SendMsg(ctx, req.(*SimpleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConcurrentNeta_serviceDesc = grpc.ServiceDesc{
	ServiceName: "concurrentNet.ConcurrentNeta",
	HandlerType: (*ConcurrentNetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _ConcurrentNeta_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "concurrentNet-proto/concurrentNet.proto",
}
